package com.jyy.download.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_RANGE".
*/
public class FileRangeDao extends AbstractDao<FileRange, Long> {

    public static final String TABLENAME = "FILE_RANGE";

    /**
     * Properties of entity FileRange.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Start = new Property(1, long.class, "start", false, "START");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property Time = new Property(3, long.class, "time", false, "TIME");
        public final static Property IsFinish = new Property(4, boolean.class, "isFinish", false, "IS_FINISH");
        public final static Property Length = new Property(5, long.class, "length", false, "LENGTH");
    }


    public FileRangeDao(DaoConfig config) {
        super(config);
    }
    
    public FileRangeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_RANGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"START\" INTEGER NOT NULL ," + // 1: start
                "\"FILE_NAME\" TEXT," + // 2: fileName
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"IS_FINISH\" INTEGER NOT NULL ," + // 4: isFinish
                "\"LENGTH\" INTEGER NOT NULL );"); // 5: length
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_RANGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileRange entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getStart());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(3, fileName);
        }
        stmt.bindLong(4, entity.getTime());
        stmt.bindLong(5, entity.getIsFinish() ? 1L: 0L);
        stmt.bindLong(6, entity.getLength());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileRange entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getStart());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(3, fileName);
        }
        stmt.bindLong(4, entity.getTime());
        stmt.bindLong(5, entity.getIsFinish() ? 1L: 0L);
        stmt.bindLong(6, entity.getLength());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileRange readEntity(Cursor cursor, int offset) {
        FileRange entity = new FileRange( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // start
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileName
            cursor.getLong(offset + 3), // time
            cursor.getShort(offset + 4) != 0, // isFinish
            cursor.getLong(offset + 5) // length
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileRange entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStart(cursor.getLong(offset + 1));
        entity.setFileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
        entity.setIsFinish(cursor.getShort(offset + 4) != 0);
        entity.setLength(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileRange entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileRange entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileRange entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
